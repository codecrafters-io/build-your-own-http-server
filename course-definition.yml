---
# Used in your course's URL: https://app.codecrafters.io/courses/<slug>
# Example: "redis"
slug: "http-server"

# The name of your course. This will be displayed in the course catalog, and on
# other course pages.
# Example: "Build your own Redis"
name: "Build your own HTTP server"

# A short name for your course, this'll be used in copy like emails.
# Example: "Redis"
short_name: "HTTP server"

# The release status for your course.
#
# - alpha: Only visible to yourself and CodeCrafters staff.
# - beta: Visible to all CodeCrafters users, but with a "beta" label.
# - live: Visible to all CodeCrafters users, no label.
#
# Allowed values: "alpha", "beta", "live"
release_status: "live"

# This is shown on the course overview page. Markdown supported, recommended length ~40 words.
#
# Recommended format:
#
# > ABC is <whatever>. In this challenge, you'll build your own ABC that's capable of D, E, F and G.
# >
# > Along the way, we'll learn about X, Y, Z and more.
#
# Example:
#
# > Redis is an in-memory data structure store often used as a database, cache, message broken and streaming engine. In this challenge
# > you'll build your own Redis server that is capable of serving basic commands, reading RDB files and more.
# >
# > Along the way, you'll learn about TCP servers, the Redis Protocol and more.
description_md: |-
  HTTP is the protocol that powers the web. In this challenge, you'll build a HTTP server that's
  capable of handling simple GET/POST requests, serving files and handling multiple concurrent connections.

  Along the way, we'll learn about TCP connections, HTTP headers, HTTP verbs, handling multiple connections and more.

# This is shown on the catalog. Plaintext only, recommended length ~10 words.
#
# Recommended format:
#
# > Learn about X, Y, Z and more
#
# Example:
#
# > Learn about TCP servers, the Redis protocol and more
#
# **TODO**: Remove _md suffix since markdown isn't supported
short_description_md: |-
  Learn about TCP servers, the HTTP protocol and more

# The percentage of users who complete your course. We'll calculate this
# automatically in the future, safe to ignore for now.
completion_percentage: 10

# List of concept slugs associated with this course
concept_slugs: ["network-protocols", "tcp-overview"]

# The languages that your course supports.
languages:
  - slug: "go"
  - slug: "haskell"
  - slug: "javascript"
  - slug: "python"
  - slug: "rust"
  - slug: "java"
    release_status: "beta"
  - slug: "c"
    release_status: "beta"
  - slug: "cpp"
    release_status: "beta"
  - slug: "csharp"
    release_status: "beta"
  - slug: "dart"
    release_status: "beta"
  - slug: "ruby"
    release_status: "beta"
  - slug: "typescript"
    release_status: "beta"
  - slug: "zig"
    release_status: "beta"

marketing:
  # Shown in the catalog.
  #
  # Recommended guidelines:
  #
  # - "easy": < 2h of work for an experienced developer
  # - "medium": > 6h of work for an experienced developer
  # - "hard": > 6h of work for an experienced developer
  #
  # Allowed values: "easy", "medium", "hard"
  difficulty: easy

  # This is shown as an example when users suggest extensions to your course.
  # Example: "Persistence" (from the Redis challenge)
  sample_extension_idea_title: "Pipelining"

  # This is shown as an example when users suggest extensions to your course.
  # Example: "A Redis server that can read and write .rdb files" (from the
  # Redis challenge)
  sample_extension_idea_description: "A HTTP server that supports HTTP/1.1 pipelining"

  # These are some default testimonials that you can use. Feel free to switch
  # these out with your own.
  testimonials:
    - author_name: "Ananthalakshmi Sankar"
      author_description: "Automation Engineer at Apple"
      author_avatar: "https://codecrafters.io/images/external/testimonials/oxta.jpeg"
      link: "https://github.com/anu294"
      text:
        "There are few sites I like as much that have a step by step guide. The
        real-time feedback is so good, it's creepy!"

    - author_name: "Patrick Burris"
      author_description: "Senior Software Developer, CenturyLink"
      author_avatar: "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg"
      link: "https://github.com/Jumballaya"
      text: |-
        I think the instant feedback right there in the git push is really cool.
        Didn't even know that was possible!

extensions:
  - slug: "http-compression"
    name: "HTTP Compression"
    description_markdown: |
      In this challenge extension you'll add [compression][http-compression] support to your HTTP server implementation.

      Along the way you'll learn about compression, compression scheme negotiation and more.

      [http-compression]: https://en.wikipedia.org/wiki/HTTP_compression

stages:
  # A identifier for this stage, needs to be unique within a course.
  - slug: "at4"
    concept_slugs:
      [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server",
      ]
    # The name of the stage. This is shown in the course catalog, and on other
    # course pages.
    name: "Bind to a port"

    # The difficulty of this stage.
    #
    # Recommended guidelines, based on how long the stage will take an
    # experienced developer to complete:
    #
    # - Very Easy (< 5 minutes)
    # - Easy (5-10 minutes)
    # - Medium (30m-1h)
    # - Hard (> 1h)
    #
    # Allowed values: "very_easy", "easy", "medium", "hard"
    difficulty: very_easy

    # The instructions for your stage. Markdown supported. Shown on the course
    # page.
    description_md: |-
      In this stage, you'll create a TCP server that listens on port 4221.

      [TCP](https://www.cloudflare.com/en-ca/learning/ddos/glossary/tcp-ip/) is the underlying protocol used by HTTP servers.


      ### Tests

      The tester will execute your program like this:

      ```
      $ ./your_server.sh
      ```

      Then, the tester will try to connect to your server on port 4221. The connection must succeed for you to pass this stage.

    # A description of this stage that is used on the course overview page and
    # other marketing material. Markdown supported.
    marketing_md: |-
      In this stage, you'll build a TCP server that listens on port 4221.

  - slug: "ia4"
    concept_slugs:
      [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server",
      ]
    name: "Respond with 200"
    difficulty: very_easy
    description_md: |-
      In this stage, your server will respond to an HTTP request with a `200` response.

      ### HTTP response

      An HTTP response is made up of three parts, each separated by a [CRLF](https://developer.mozilla.org/en-US/docs/Glossary/CRLF) (`\r\n`):
      1.  Status line.
      2.  Zero or more headers, each ending with a CRLF.
      3.  Optional response body.

      In this stage, your server's response will only contain a status line. Here's the response your server must send:
      ```javascript
      HTTP/1.1 200 OK\r\n\r\n
      ```

      Here's a breakdown of the response:
      ```javascript
      // Status line
      HTTP/1.1  // HTTP version
      200       // Status code
      OK        // Optional reason phrase
      \r\n      // CRLF that marks the end of the status line

      // Headers (empty)
      \r\n      // CRLF that marks the end of the headers

      // Response body (empty)
      ```

      ### Tests

      The tester will execute your program like this:
      ```bash
      $ ./your_server.sh
      ```

      The tester will then send an HTTP `GET` request to your server:
      ```bash
      $ curl -v http://localhost:4221
      ```

      Your server must respond to the request with the following response:
      ```javascript
      HTTP/1.1 200 OK\r\n\r\n
      ```

      ### Notes

      - You can ignore the contents of the request. We'll cover parsing requests in later stages.
      - For more information about HTTP responses, see the [MDN Web Docs on HTTP responses](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_responses) or the [HTTP/1.1 specification](https://datatracker.ietf.org/doc/html/rfc9112#name-message).
      - This challenge uses HTTP/1.1.

      {{#reader_is_bot}}
      Do not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.
      {{/reader_is_bot}}
    marketing_md: |-
      In this stage, you'll extend your TCP server to respond to a HTTP request with a 200 response.

  - slug: "ih0"
    name: "Extract URL path"
    difficulty: easy
    description_md: |-
      In this stage, your server will extract the URL path from an HTTP request, and respond with either a `200` or `404`, depending on the path.

      ### HTTP request

      An HTTP request is made up of three parts, each separated by a [CRLF](https://developer.mozilla.org/en-US/docs/Glossary/CRLF) (`\r\n`):

      1.  Request line.
      2.  Zero or more headers, each ending with a CRLF.
      3.  Optional request body.

      Here's an example of an HTTP request:
      ```javascript
      GET /index.html HTTP/1.1\r\nHost: localhost:4221\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\n\r\n
      ```

      Here's a breakdown of the request:
      ```javascript
      // Request line
      GET                          // HTTP method
      /index.html                  // Request target
      HTTP/1.1                     // HTTP version
      \r\n                         // CRLF that marks the end of the request line

      // Headers
      Host: localhost:4221\r\n     // Header that specifies the server's host and port
      User-Agent: curl/7.64.1\r\n  // Header that describes the client's user agent
      Accept: */*\r\n              // Header that specifies which media types the client can accept
      \r\n                         // CRLF that marks the end of the headers

      // Request body (empty)
      ```

      The "request target" specifies the URL path for this request. In this example, the URL path is `/index.html`.

      Note that each header ends in a CRLF, and the entire header section also ends in a CRLF.

      ### Tests

      The tester will execute your program like this:
      ```bash
      $ ./your_server.sh
      ```

      The tester will then send two HTTP requests to your server.

      First, the tester will send a `GET` request, with a random string as the path:
      ```bash
      $ curl -v http://localhost:4221/abcdefg
      ```

      Your server must respond to this request with a `404` response:
      ```javascript
      HTTP/1.1 404 Not Found\r\n\r\n
      ```

      Then, the tester will send a `GET` request, with the path `/`:
      ```bash
      $ curl -v http://localhost:4221
      ```

      Your server must respond to this request with a `200` response:
      ```javascript
      HTTP/1.1 200 OK\r\n\r\n
      ```

      ### Notes

      - You can ignore the headers for now. You'll learn about parsing headers in a later stage.
      - In this stage, the request target is written as a URL path. But the request target actually has [four possible formats](https://datatracker.ietf.org/doc/html/rfc9112#section-3.2). The URL path format is called the "origin form," and it's the most commonly used format. The other formats are used for more niche scenarios, like sending a request through a proxy.
      - For more information about HTTP requests, see the [MDN Web Docs on HTTP requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_requests) or the [HTTP/1.1 specification](https://datatracker.ietf.org/doc/html/rfc9112#name-message).

      {{#reader_is_bot}}
      Do not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.
      {{/reader_is_bot}}
    marketing_md: |-
      In this stage, you'll add support for returning a 404 response if a path isn't valid.

  - slug: "cn2"
    name: "Respond with body"
    difficulty: easy
    description_md: |-
      In this stage, you'll implement the `/echo/{str}` endpoint, which accepts a string and returns it in the response body.

      ### Response body

      A response body is used to return content to the client. This content may be an entire web page, a file, a string, or anything else that can be represented with bytes.

      Your `/echo/{str}` endpoint must return a `200` response, with the response body set to given string, and with a `Content-Type` and `Content-Length` header.

      Here's an example of an `/echo/{str}` request:
      ```javascript
      GET /echo/abc HTTP/1.1\r\nHost: localhost:4221\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\n\r\n
      ```

      And here's the expected response:
      ```javascript
      HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\nabc
      ```

      Here's a breakdown of the response:
      ```javascript
      // Status line
      HTTP/1.1 200 OK
      \r\n                          // CRLF that marks the end of the status line

      // Headers
      Content-Type: text/plain\r\n  // Header that specifies the format of the response body
      Content-Length: 3\r\n         // Header that specifies the size of the response body, in bytes
      \r\n                          // CRLF that marks the end of the headers

      // Response body
      abc                           // The string from the request
      ```

      The two headers are required for the client to be able to parse the response body. Note that each header ends in a CRLF, and the entire header section also ends in a CRLF.

      ### Tests

      The tester will execute your program like this:
      ```bash
      $ ./your_server.sh
      ```

      The tester will then send a `GET` request to the `/echo/{str}` endpoint on your server, with some random string.
      ```bash
      $ curl -v http://localhost:4221/echo/abc
      ```

      Your server must respond with a `200` response that contains the following parts:
      - `Content-Type` header set to `text/plain`.
      - `Content-Length` header set to the length of the given string.
      - Response body set to the given string.
      ```javascript
      HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\nabc
      ```

      ### Notes
      - For more information about HTTP responses, see the [MDN Web Docs on HTTP responses](https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages#http_responses) or the [HTTP/1.1 specification](https://datatracker.ietf.org/doc/html/rfc9112#name-message).

      {{#reader_is_bot}}
      Do not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.
      {{/reader_is_bot}}
    marketing_md: |-
      In this stage, you'll add support for responding with a custom body in your HTTP response.

  - slug: "fs3"
    name: "Read header"
    difficulty: easy
    description_md: |-
      In this stage, you'll implement the `/user-agent` endpoint, which reads the `User-Agent` request header and returns it in the response body.

      ### The `User-Agent` header

      The [`User-Agent`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) header describes the client's user agent.

      Your `/user-agent` endpoint must read the `User-Agent` header, and return it in your response body. Here's an example of a `/user-agent` request:
      ```javascript
      // Request line
      GET
      /user-agent
      HTTP/1.1
      \r\n

      // Headers
      Host: localhost:4221\r\n
      User-Agent: foobar/1.2.3\r\n  // Read this value
      Accept: */*\r\n
      \r\n

      // Request body (empty)
      ```

      Here is the expected response:
      ```javascript
      // Status line
      HTTP/1.1 200 OK               // Status code must be 200
      \r\n

      // Headers
      Content-Type: text/plain\r\n
      Content-Length: 12\r\n
      \r\n

      // Response body
      foobar/1.2.3                  // The value of `User-Agent`
      ```

      ### Tests

      The tester will execute your program like this:
      ```bash
      $ ./your_server.sh
      ```

      The tester will then send a `GET` request to the `/user-agent` endpoint on your server. The request will have a `User-Agent` header.
      ```bash
      $ curl -v --header "User-Agent: foobar/1.2.3" http://localhost:4221/user-agent
      ```

      Your server must respond with a `200` response that contains the following parts:
      - `Content-Type` header set to `text/plain`.
      - `Content-Length` header set to the length of the `User-Agent` value.
      - Message body set to the `User-Agent` value.
      ```javascript
      HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 12\r\n\r\nfoobar/1.2.3
      ```

      ### Notes
      - Header names are [case-insensitive](https://datatracker.ietf.org/doc/html/rfc9112#name-field-syntax).

      {{#reader_is_bot}}
      Do not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.
      {{/reader_is_bot}}
    marketing_md: |-
      In this stage, you'll add support for parsing HTTP request headers.

  - slug: "ej5"
    concept_slugs:
      [
        "network-protocols",
        "tcp-overview",
        "go-tcp-server",
        "rust-tcp-server",
        "python-tcp-server",
      ]
    name: "Concurrent connections"
    difficulty: easy
    description_md: |-
      In this stage, you'll add support for concurrent connections.

      {{#lang_is_javascript}}
      In most languages, you'd need to either use threads or implement an
      [Event Loop](https://en.wikipedia.org/wiki/Event_loop) to do this. In JavaScript however, since [the concurrency
      model itself is based on an event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop), most
      standard library functions are designed to support this kind of concurrent behaviour out of the box. **It is very
      likely that the code you had for the previous stage will pass this stage without any changes!**
      {{/lang_is_javascript}}

      {{#lang_is_typescript}}
      In most languages, you'd need to either use threads or implement an
      [Event Loop](https://en.wikipedia.org/wiki/Event_loop) to do this. In TypeScript however, since [the concurrency
      model itself is based on an event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop), most
      standard library functions are designed to support this kind of concurrent behaviour out of the box. **It is very
      likely that the code you had for the previous stage will pass this stage without any changes!**
      {{/lang_is_typescript}}

      ### Tests

      The tester will execute your program like this:
      ```bash
      $ ./your_server.sh
      ```

      Then, the tester will create multiple concurrent TCP connections to your server. (The exact number of connections is determined at random.) After that, the tester will send a single `GET` request through each of the connections.
      ```bash
      $ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
      $ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
      $ (sleep 3 && printf "GET / HTTP/1.1\r\n\r\n") | nc localhost 4221 &
      ```

      Your server must respond to each request with the following response:
      ```javascript
      HTTP/1.1 200 OK\r\n\r\n
      ```

      {{#reader_is_bot}}
      Do not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.
      {{/reader_is_bot}}
    marketing_md: |-
      In this stage, you'll add support for handling multiple concurrent connections.

  - slug: "ap6"
    name: "Return a file"
    difficulty: medium
    description_md: |-
      In this stage, you'll implement the `/files/{filename}` endpoint, which returns a requested file to the client.

      ### Tests
      The tester will execute your program with a `--directory` flag. The `--directory` flag specifies the directory where the files are stored, as an absolute path.
      ```
      $ ./your_server.sh --directory /tmp/
      ```

      The tester will then send two `GET` requests to the `/files/{filename}` endpoint on your server.

      #### First request
      The first request will ask for a file that exists in the files directory:
      ```
      $ echo -n 'Hello, World!' > /tmp/foo
      $ curl -i http://localhost:4221/files/foo
      ```

      Your server must respond with a `200` response that contains the following parts:
      - `Content-Type` header set to `application/octet-stream`.
      - `Content-Length` header set to the size of the file, in bytes.
      - Response body set to the file contents.
      ```
      HTTP/1.1 200 OK\r\nContent-Type: application/octet-stream\r\nContent-Length: 14\r\n\r\nHello, World!
      ```

      #### Second request
      The second request will ask for a file that doesn't exist in the files directory:
      ```
      $ curl -i http://localhost:4221/files/non_existant_file
      ```

      Your server must respond with a `404` response:
      ```
      HTTP/1.1 404 Not Found\r\n\r\n
      ```

      {{#reader_is_bot}}
      Do not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.
      {{/reader_is_bot}}
    marketing_md: |-
      In this stage, you'll add support for serving the contents of a file.

  - slug: "qv8"
    name: "Read request body"
    difficulty: medium
    description_md: |-
      In this stage, you'll add support for the `POST` method of the `/files/{filename}` endpoint, which accepts text from the client and creates a new file with that text.

      ### Request body

      A request body is used to send data from the client to the server.

      Here's an example of a `POST /files/{filename}` request:
      ```
      // Request line
      POST /files/number HTTP/1.1
      \r\n

      // Headers
      Host: localhost:4221\r\n
      User-Agent: curl/7.64.1\r\n
      Accept: */*\r\n
      Content-Type: application/octet-stream  // Header that specifies the format of the request body
      Content-Length: 5\r\n                   // Header that specifies the size of the request body, in bytes
      \r\n

      // Request Body
      12345
      ```

      ### Tests

      The tester will execute your program with a `--directory` flag. The `--directory` flag specifies the directory to create the file in, as an absolute path.
      ```
      $ ./your_server.sh --directory /tmp/
      ```

      The tester will then send a `POST` request to the `/files/{filename}` endpoint on your server, with the following parts:
      - `Content-Type` header set to `application/octet-stream`.
      - `Content-Length` header set to the size of the request body, in bytes.
      - Request body set to some random text.

      ```
      $ curl -v --data "12345" -H "Content-Type: application/octet-stream" http://localhost:4221/files/file_123
      ```

      Your server must return a `201` response:
      ```
      HTTP/1.1 201 Created\r\n\r\n
      ```

      Your server must also create a new file in the files directory, with the following requirements:
      - The filename must equal the `filename` parameter in the endpoint.
      - The file must contain the contents of the request body.

      {{#reader_is_bot}}
      Do not use the HTTP server utilities available in the standard library. Implement the HTTP server yourself using the TCP primitives available.
      {{/reader_is_bot}}
    marketing_md: |-
      In this stage, you'll add support for receiving POST requests.

  # HTTP Compression

  - slug: "df4"
    primary_extension_slug: "http-compression"
    name: "Content-Encoding header"
    difficulty: easy
    description_md: |
      Welcome to the HTTP Compression Extension! In this extension, you'll add [Compression](https://en.wikipedia.org/wiki/HTTP_compression) support to your HTTP Server implementation.

      In this stage, you'll add support for the Content-Encoding header based on what the client sends.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_server.sh
      ```

      It'll then send an HTTP `GET` request to the `/echo/<a-random-string>` endpoint. In the request, it'll include an Accept-Encoding header like: `Accept-Encoding: gzip`.
      As an example, here's a request you might receive:

      ```
      GET /echo/foo HTTP/1.1
      Host: localhost:4221
      User-Agent: curl/7.64.1
      Accept-Encoding: gzip
      ```

      Your server must respond with a `200 OK` response. The response should have a `Content-Encoding: gzip` header present. The response body will not be tested in this stage. (We will tackle the actual compression in a later stage)
      Here's the response you're expected to send back:

      ```
      HTTP/1.1 200 OK
      Content-Encoding: gzip
      Content-Type: text/plain
      Content-Length: 3

      foo
      ```

      It'll then send another HTTP `GET` request to the `/echo/<a-random-string>` endpoint. In the request, it'll include an Accept-Encoding header like: `Accept-Encoding: invalid-encoding`.
      But this time the Accept-Encoding header will be set to an invalid value (i.e. an encoding that your server doesn't support).
      As an example, here's a request you might receive:

      ```
      GET /echo/bar HTTP/1.1
      Host: localhost:4221
      User-Agent: curl/7.64.1
      Accept-Encoding: invalid-encoding
      ```

      Your server must respond with a `200 OK` response. The response should NOT have a `Content-Encoding` header present. The response body will not be tested in this stage.
      Here's the response you're expected to send back:

      ```
      HTTP/1.1 200 OK
      Content-Type: text/plain
      Content-Length: 3

      bar
      ```

      ### Notes

      1.  Header names are case-insensitive, i.e. `accept-encoding: gzip` and `Accept-Encoding: gzip` are equivalent. We won't test this explicitly in this challenge, but it's a good practice to lowercase your header names before comparison.
    marketing_md: |
      In this stage, you'll add support for reading the `Accept-Encoding` header sent by clients, and respond with `Content-Encoding` header in your response.

  - slug: "ij8"
    primary_extension_slug: "http-compression"
    name: "Multiple compression schemes"
    difficulty: medium
    description_md: |
      In this stage, you'll add support for choosing a compression scheme when multiple values are passed in via the `Accept-Encoding` header.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_server.sh
      ```

      It'll then send an HTTP `GET` request to the `/echo/<a-random-string>` endpoint. In the request, it'll include an Accept-Encoding header set to multiple values, like: `Accept-Encoding: encoding-1, gzip, encoding-2`.
      One of the values in the list will be `gzip`, but the other values will be invalid encoding names.

      As an example, here's a request you might receive:

      ```
      GET /echo/foo HTTP/1.1
      Host: localhost:4221
      User-Agent: curl/7.64.1
      Accept-Encoding: encoding-1, gzip, encoding-2
      ```

      Your server must respond with a `200 OK` response. The response should have a `Content-Encoding: gzip` header present. The response body will not be tested in this stage. (We will tackle the actual compression in a later stage)
      Here's the response you're expected to send back:

      ```
      HTTP/1.1 200 OK
      Content-Encoding: gzip
      Content-Type: text/plain
      Content-Length: 3

      foo
      ```

      It'll then send another HTTP `GET` request to the `/echo/<a-random-string>` endpoint. In the request, it'll include an Accept-Encoding header like: `Accept-Encoding: encoding-1, encoding-2`.
      But this time the Accept-Encoding header will not contain gzip, it'll only contain invalid values (i.e. encodings that your server doesn't support).
      As an example, here's a request you might receive:

      ```
      GET /echo/bar HTTP/1.1
      Host: localhost:4221
      User-Agent: curl/7.64.1
      Accept-Encoding: encoding-1, encoding-2
      ```

      Your server must respond with a `200 OK` response. The response should NOT have a `Content-Encoding` header present. The response body will not be tested in this stage.
      Here's the response you're expected to send back:

      ```
      HTTP/1.1 200 OK
      Content-Type: text/plain
      Content-Length: 3

      bar
      ```

      ### Notes

      1.  Header names are case-insensitive, i.e. `accept-encoding: gzip` and `Accept-Encoding: gzip` are equivalent. We won't test this explicitly in this challenge, but it's a good practice to lowercase your header names before comparison.
    marketing_md: |
      In this stage, you'll add support for reading multiple compression values from `Accept-Encoding` header sent by clients, and respond with `Content-Encoding` header in your response.

  - slug: "cr8"
    primary_extension_slug: "http-compression"
    name: "Gzip compression"
    difficulty: medium
    description_md: |
      In this stage, you'll add support for returning responses compressed using gzip.

      ### Tests

      The tester will execute your program like this:

      ```bash
      ./your_server.sh
      ```

      It'll then send an HTTP `GET` request to the `/echo/<a-random-string>` endpoint. In the request, it'll include an Accept-Encoding header like: `Accept-Encoding: gzip`.
      As an example, here's a request you might receive:

      ```
      GET /echo/foo HTTP/1.1
      Host: localhost:4221
      User-Agent: curl/7.64.1
      Accept-Encoding: gzip
      ```

      Your server must respond with a `200 OK` response. The response should have a `Content-Encoding: gzip` header present. The response body should be the random string sent in the request, gzip encoded. And the `Content-Length` header should be the length of the gzip encoded data.
      Here's the response you're expected to send back:
      If the raw string was `foo`, the hex encoded data would be `gzip-encoded-data`
      Hex representation of it would be `1f8b08008c643b6602ff4bcbcf07002165738c03000000`

      ```
      HTTP/1.1 200 OK
      Content-Encoding: gzip
      Content-Type: text/plain
      Content-Length: 23

      gzip-encoded-data
      ```

    marketing_md: |
      In this stage, you'll add support for encoding the response body using `gzip`.
